
type ToStr<T> = {
    str: (T) => string
}

type ToFloat<T> = {
    float: (T) => float
}

type ToInt<T> = {
    int: (T) => int
}

const IntToStr: ToStr<int> = ToStr<int>{str: intToString}
const FloatToStr: ToStr<float> = ToStr<float>{str: floatToString}
const IntToFloat: ToFloat<int> = ToFloat<int>{float: intToFloat}
const FloatToInt: ToInt<float> = ToInt<float>{int: floatToInt}

// x as float
// IntAs<float>(x)
// type As<From, To> = {
//     as: (From) => To,
// }
const IntAsFloat = As<int, float>{as: intToFloat}
const FloatAsInt = As<float, int>{as: floatToInt}
const IntAsString = As<int, string>{as: intToString}
const FloatAsString = As<float, string>{as: floatToString}

// Equality and stuff
type Eq<T> = {
    "==": (T, T) => bool,
}

const IntEq = Eq<int>{"==": intEq}
const FloatEq = Eq<float>{"==": floatEq}
const StringEq = Eq<string>{"==": stringEq}

// For checking equality

const arrayEq: <T,>(Array<T>, Array<T>, Eq<T>) => bool
 = <T,>(one: Array<T>, two: Array<T>, eq: Eq<T>): bool => {
    switch (one, two) {
        ([], []) => true,
        ([one, ...rone], [two, ...rtwo]) => if eq."=="(one, two) {
            arrayEq<T>(rone, rtwo, eq)
        } else {
            false
        },
        _ => false
    }
}

const ArrayEq = <T,>(eq: Eq<T>) => Eq<Array<T>>{
    "==": (one: Array<T>, two: Array<T>) => 
    len<T>(one) == len<T>(two) && arrayEq<T>(one, two, eq)
}
const ArrayStringEq = ArrayEq<string>(StringEq)
const ArrayIntEq = ArrayEq<int>(IntEq)
const ArrayFloatEq = ArrayEq<float>(FloatEq)