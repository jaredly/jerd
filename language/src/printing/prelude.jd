
type ToStr<T> = {
    str: T => string
}

type ToFloat<T> = {
    float: T => float
}

type ToInt<T> = {
    int: T => int
}

const IntToStr: ToStr<int> = ToStr<int>{str: intToString}
const FloatToStr: ToStr<float> = ToStr<float>{str: floatToString}
const IntToFloat: ToFloat<int> = ToFloat<int>{float: intToFloat}
const FloatToInt: ToInt<float> = ToInt<int>{int: floatToInt}

// x as float
// IntAs<float>(x)
type As<From, To> = {
    as: (From) => To,
}
const IntAsFloat = As<int, float>{as: intToFloat}

const As<int, float>