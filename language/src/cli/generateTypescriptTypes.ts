import generate from '@babel/generator';
import * as t from '@babel/types';
import fs from 'fs';
import { loadInit } from '../printing/loadPrelude';
import {
    decoratorExports,
    typeDeclarations,
    typeExports,
} from '../printing/typeScriptPrinterSimple';
import { sortedTypes } from '../typing/analyze';
import { newWithGlobal } from '../typing/types';

export function generateTypescriptTypes(input: string, output: string) {
    const init = loadInit(input ? fs.readFileSync(input, 'utf8') : undefined);
    const env = newWithGlobal(init.initialEnv);
    const items = typeDeclarations(
        env,
        {},
        Object.keys(env.global.effects),
        sortedTypes(env),
    );
    items.push(...typeExports(env));
    items.push(...decoratorExports(env));
    const ast = t.file(t.program(items, [], 'script'));
    const { code } = generate(ast, {
        sourceMaps: false,
        sourceFileName: 'prelude.jd',
    });
    const preamble = input
        ? `// AUTOGENERATED by 'node bootstrap.js prelude-types'\n`
        : `// AUTOGENERATED by 'node bootstrap.js prelude-types'
        export type sampler2D = {[y: number]: {[x: number]: Vec4}};

        `.replace(/^\s+/gm, '');
    fs.writeFileSync(output, preamble + code, 'utf8');
}
