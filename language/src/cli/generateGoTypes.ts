import fs from 'fs';
import { typeDefToGo, Env, idToGo } from '../printing/goPrinter';
import { loadInit } from '../printing/loadPrelude';
import { atom, PP, printToString } from '../printing/printer';
import * as pp from '../printing/printer';
import { newWithGlobal } from '../typing/types';
import { idName } from '../typing/env';
import { OutputOptions } from '../printing/glslPrinter';
import { OutputOptions as IOutputOptions } from '../printing/ir/types';

export const typeDefsToGo = (
    env: Env,
    opts: OutputOptions,
    irOpts: IOutputOptions,
    ids: Array<string>,
): Array<PP | null> => {
    return ids
        .map((idRaw) => typeDefToGo(env, opts, irOpts, idRaw))
        .concat(typeAliasesToGo(env, opts, irOpts, ids));
};

export const typeAliasesToGo = (
    env: Env,
    opts: OutputOptions,
    irOpts: IOutputOptions,
    ids: Array<string>,
): Array<PP | null> => {
    return ([] as Array<PP | null>).concat(
        ...Object.keys(env.global.typeNames).map((name) =>
            env.global.typeNames[name].map((id, i) =>
                !ids.includes(idName(id)) ||
                env.global.types[idName(id)].typeVbls.length
                    ? null
                    : pp.items([
                          atom(`type ${name}${i > 0 ? '_' + i : ''}`),
                          atom(' = '),
                          idToGo(env, opts, id, true),
                          atom(';'),
                      ]),
            ),
        ),
    );
};

export const enumAliasesToGo = (env: Env, ids: Array<string>) => {
    const items: Array<PP> = [];
    ids.forEach((idRaw) => {
        const name = env.global.idNames[idRaw] || `T${idRaw}`;
        const defn = env.global.types[idRaw];
        if (defn.type === 'Enum') {
            defn.items.forEach((t, idx) => {
                const subName =
                    env.global.idNames[idName(t.ref.id)] ||
                    `T${idName(t.ref.id)}`;
                items.push(
                    pp.items([
                        atom(`const `),
                        atom(`${name}_${subName}`),
                        atom(' int = '),
                        atom(idx.toString()),
                        atom(';'),
                    ]),
                );
            });
        }
    });

    return items;
};

export function generateGoTypes(input: string, output: string) {
    const init = loadInit(input ? fs.readFileSync(input, 'utf8') : undefined);
    const env: Env = {
        ...newWithGlobal(init.initialEnv),
        typeDefs: {},
        usedImports: {},
    };
    const items = typeDefsToGo(env, {}, {}, Object.keys(env.global.types));
    items.push(...enumAliasesToGo(env, Object.keys(env.global.types)));

    const code = items
        .map((pp) => (pp ? printToString(pp, 100) : ''))
        .join('\n\n');
    const preamble = `package main\n// AUTOGENERATED by 'node bootstrap.js go-types'\n`;
    fs.writeFileSync(output, preamble + code, 'utf8');
}
