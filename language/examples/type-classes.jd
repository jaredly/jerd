
type Monad<T> = {
    return: <Item,>(Item) ={}> T<Item>, // so this one ... well I guess could be anything
    // and these could also
    bind: <Item, Changed>(T<Item>, (Item) ={}> T<Changed>) ={}> T<Changed>,
    // as with this.
    map:  <Item, Changed>(T<Item>, (Item) ={}> Changed) ={}> T<Changed>
}

// type Some<T> = {0: T}
// type Some<T> = (T)
// type Option<T> = Some<T> | None

// const MyMonad = Monad<Option,>{
//     return: <Ok>(v: Ok) ={}> Some(v),
//     map: <Ok, Ok2>(v: Option<Ok>, op: (Ok) ={e}> Ok2): Option<Ok2> ={e}> None,
//     // map: <Ok, Ok2>(v: Option<Ok>, op: (Ok) ={e}> Ok2): Option<Ok2> ={e}> switch v {
//     //     None => None,
//     //     Ok(x) => Ok(op(x)),
//     // },
//     bind: <Ok, Ok2>(v: Option<Ok>, op: (Ok) ={e}> Option<Ok2>): Result<Ok2, Err> ={e}> None,
//     // bind: <Ok, Ok2>(v: Option<Ok>, op: (Ok) ={e}> Option<Ok2>): Result<Ok2, Err> ={e}> switch v {
//     //     None => None,
//     //     Ok(x) => op(x),
//     // },
// }
