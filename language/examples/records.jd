
type HasName = {name: string}
type HasAge = {age: int}

type Person = {
    ...HasName,
    ...HasAge,
    what: int,
}

const me = Person{name: "June", age: 10, what: 3}
const alsoMe = Person{...me, what: 11}

me.name == "June"
me.age == 10
alsoMe.name == "June"
alsoMe.what == 11

type Employee = {
    ...Person,
    address: string,
}

//ok

const you = Employee{...me, address: "Yes"}

const them = Employee{name: "You", age: 100, what: 3, address: "No"}

you.name == "June"
them.name == "You"
them.address == "No"

const getName = <T: Person>(m: T) => m.name

getName<Person>(me) == "June"
getName<Employee>(them) == "You"

type House = {
    occupant: Person,
}

const getNameAndAge = <T: HasName + HasAge>(m: T) => m.name ++ intToString(m.age)

const setAge = <T: Person>(m: T) => T{...m, age: 4}

// In Go, we'd need all records to implement the `Copyable` interface, and then
// res := m.Copy()
// res.(Person).SetName("Yes")
// return res

// Should variants just be .... multiple records put together?
// And tuple types, are just records where the names are numbers?
// maybe? although then it would be weird for them to subtype...
/*

type Base = Base{id: string, slug: number}
type ContentItem =
    Video{...Base, duration: int}
    Article{...Base, timeEstimate: int}
    Exercise{...Base, minScore: int}

So in that case, `ContentItem` would count as a subType of `Base`.
But a record can never have a subtype of an enum.

[verdict for the following: not right now]
for completeness, would it make sense to be able to have a type be polymorphic over a subtype?
Like
type XYZ<T> = XYZ{...T, x: int, y: int, z: int}
In theory it doesn't seem like it would really present a problem, would it?
hrm so `XYZ<T>` would then qualify as a `X: T`.
And under the hood, in like Go or something,

const x = <T>(m: T): XYZ<T> => XYZ{...m, x: 3, y: 2, z: 1}

Is that a thing we'd be able to make sense of?
remembering that in go, generics are done via `interface{}` and sometimes reflection.
Ok yeah being generic over the spread would make it muuch harder to codegen the go code
So I'm going to say **no** we don't allow this

*/

const here = House{occupant: me}

here.occupant.name == "June"


// type Awesome = {
// }

// type Animal =
//     | Person(int)
//     | Dog{name: string}

type Counter<T> = {
    item: T,
    count: int,
}

const countMe = Counter<int>{item: 10, count: 4000}

countMe.item == 10

Counter<() => string>{item: () => "hi", count: 10}.item() == "hi"

const countAny = Counter<<T>(T) => string>{item: <T,>(input: T) => "hi", count: 10}

countAny.item<string>("String") == "hi"
countAny.item<int>(10) == "hi"

// So lol typescript doesn't actually have type spread. which is funny
// but I can just hardcode it I think.
// also `extends` is what I'll need to use for these inline dealios
// ooh yes ok this will work folks.
const countNamed = Counter<<T: HasName>(T) => string>{item: <T: HasName>(input: T) => input.name, count: 10}

countNamed.item<Person>(me) == "June"

const double = <T,>(x: Array<T>) => concat<T>(x, x)

// Ok folks, how do we do NamedTuples? e.g. records without names?
// I guess we've gotta just check for a `id + apply`, right? that's annoying.
// i mean, given that my record constructors aren't currently actual functions.
// and they probably shouldn't be tbh.
// I mean its fine though.

const gotit = Some<int>{_: 5}

// {5}

gotit.contents == 5



type Animal = {
    ...HasName,
    furColor: string,
}

type WereWolf = {
    ...Animal,
    ...Person,
}

const aDog = Animal{name: "wolrf", furColor: "red"}
const aPerson = Person{name: "ralf", age: 23, what: 2}

WereWolf{...aDog, ...aPerson}.name == "ralf"
// Test that ordered spreads work correctly
WereWolf{...aPerson, ...aDog}.name == "wolrf"








// const notit = Option::None

/*

type Employee = {
    ...Person,
    joined: int,
}

type FancyCounter<T, E> = {
    ...Counter<T>,
    fancy: E,
}

type Caller{e} = {
  callMe: () ={e}> int,
}

type FancyCaller{e} = {
  ...Caller{e},
  more: int
}

type Monad{re, be, me}<T: * -> *> = {
    return: <Item,>(Item) ={re}> T<Item>, // so this one ... well I guess could be anything
    // and these could also
    bind: <Item, Changed>(T<Item>, (Item) ={e}> T<Changed>) ={e, be}> T<Changed>,
    // as with this.
    map:  <Item, Changed>(T<Item>, (Item) ={e}> Changed) ={e, me}> T<Changed>,
}

type AnyFn<A> = <A>(x: A) => A

// ok but like what's the algebra of this
// I feel like it's inconsistent


// So if
type Counter<T> = {item: T}
// is basically
type Counter = T =>> {item: T}
// and
type AnyFn<A> = (x: A) => A
// is um
type AnyFn = A =>> (x: A) => A
// also known as...
type AnyFn = <A>(x: A) => A
//
:kind AnyFn = * -> *
:kind Counter = * -> *

const id: <A>(x: A) => A = (x: A):A => x
:type id = <A>(x: A) => A
:kind :type id = * -> *

// so basically
// Monad is like "If you give me a T with a single arg, I'll give you a record"

// So here's I'm "instantiating" the type with effects args, and the requested type arg.
const MyMonad = Monad{}<Option>{
    return: <E,>(v: E) ={}> Some(v),
    bind: <Item, Changed>(t: T<Item>, fn: (i: Item) ={e}> T<Changed>): T<Changed> ={e}> switch t {
        None => None,
        Some(v) => fn(v)
    },
    map: <Item, Changed>(t: T<Item>, fn: (i: Item) ={e}> Changed): T<Changed> ={e}> switch t {
        None => None,
        Some(v) => Some(fn(v))
    },
}

// So like this is a value that we're saying requires a type argument
// before you can use it.
// which is maybe a little wild?
// but like here you go, right?

const OkMonad = <Err,>Monad{}<Result<_, Err>>{
    return: <Ok,>(c: Ok): Result<Ok, Err> ={}> Ok(c),
    map: <Ok, Ok2>(v: Result<Ok, Err>, op: (Ok) ={e}> Ok2): Result<Ok2, Err> ={e}> switch v {
        Fail(x) => Fail(x),
        Ok(x) => Ok(op(x)),
    },
    bind: <Ok, Ok2>(
        v: Result<Ok, Err>,
        op: (Ok) ={e}> Result<Ok2, Err>,
    ): Result<Ok2, Err> ={e}> switch v {
        Fail(x) => Fail(x),
        Ok(x) => op(x),
    },
}

*/

type SomethingWithDefaults = {
    name: string,
    age: int,
    hasGlasses: bool = false,
};

SomethingWithDefaults{name: "Me", age: 4}.hasGlasses == false
SomethingWithDefaults{name: "Me", age: 4, hasGlasses: true}.hasGlasses == true

type One = {
    name: string = "One",
    last: string = "Last"
};
type Two = {
    ...One{name: "Two"},
    age: int = 2,
};
type Three = {
    ...Two{name: "Three", age: 3},
    size: int = 3,
};
type Four = {
    ...Three,
    color: string,
}


One.name == "One"
Two.name == "Two"
Two.age == 2
Two.last == "Last"
Three.name == "Three"
Three{age: 5}.age == 5
Three.size == 3
Three.last == "Last"

Four{color: "red"}.color == "red"
Four{color: "red"}.last == "Last"


type SubitemWithDefaults = {
    ...SomethingWithDefaults{
        name: "Hello",
        age: 10,
    },
};

SubitemWithDefaults{name: "Stephen"}.hasGlasses == false
SubitemWithDefaults{name: "Stephen"}.name == "Stephen"

SubitemWithDefaults.name == "Hello"
SubitemWithDefaults.hasGlasses == false
SubitemWithDefaults.age == 10