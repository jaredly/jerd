// Each of these expressions should trigger a type error.

3 == "4"

const hello = (name: string) => "hello"

hello(5)

const count = (num: int) => 34

count(hello("m"))

// Some generics!

const identity = <T,>(x: T): T => x

// Arg mismatch
identity<int>("hello")

// Return mismatch
count(identity<string>("hello"))

// Return value mismatch
<T,>(x: T): int => x

// Return value mismatch
<T,>(x: int): T => x

effect GetString {
    get: () => string,
}

// Not pure
() ={}> raise!(GetString.get())

<T,>(ok: T): string => hello(ok)

(ok: string) => ok + 2

() => {
    const x = "hello";
    x + 2
}

(fn: (string) => string) => {
    const x = fn(4);
    x ++ "hi"
}

(fn: () => string) => {
    const x: int = fn();
    x + 2
}

(fn: () => string) => {
    const x = fn();
    x + 2
}


/* If blocks */

if "hello" { 3 } else { 4 }

if true { 3 } else { "4" }

{
    const x = 4;
    x(2)
}

log("a", "b")

undefinedVbl

(): string => 5

effect GetInt {
    get: () => int,
}

() ={GetString}> raise!(GetInt.get())

handle! () => 4 {
    GetString.get(() => k) => 4,
    GetInt.get(() => k) => 5,
    pure(x) => x,
}

handle! () => 4 {
    Undef.get(() => k) => 5,
    pure(x) => x,
}

handle! () => 4 {
    GetString.get(() => k) => 4,
    pure(x) => "hi",
}

raise!(Undef.get())


/** Records! */

type Person = {
    name: string,
    age: int,
    what: int,
}

Person{name: "Bob", age: "hi", what: 3}

Person{name: "Bob", age: 10, what: 3, age: 20}

Person{name: "Bob", age: 10}

const me = Person{name: "Bob", age: 10, what: 3}

type Dog = {name: string}

const dog = Dog{name: "Man"}

Person{...dog, age: 15}

type Frog = {age: int}

const getName = <T: Dog>(m: T) => m.name

// Not a subtype folks
getName<Frog>(Frog{age: 5})

type HasName = {name: string}
type HasAge = {age: int}

const getNameAndAge = <T: HasName + HasAge>(m: T) => m.name ++ intToString(m.age)

getNameAndAge<HasName>(HasName{name: "hi"})


// Generic records

type Counter<T> = {
    item: T,
    count: int,
}

Counter{item: 10, count: 4}

const countAny = Counter<<T>(T) => string>{item: <T,>(input: T) => "hi", count: 10}
countAny.item<string>() == "hi"

Counter<<T>(T) => string>{item: <T,>() => "hi", count: 10}

Counter<<T>(T) => T>{item: <T,>(input: T) => "hi", count: 10}

const m = Counter<<T: HasName>(T) => string>{item: <T: HasName>(input: T) => input.name, count: 10}
const n = m.item
n<Dog>(dog)

type Some<T> = {
    value: T
}
type None = {}

enum Option<T> {
    Some<T>,
    None
}

type Twice<T> = {
    one: T,
    two: T,
}

enum OptionOrTwice<T> {
    ...Option<T>,
    Twice<T>
}

// Option<int>:Some<string>{_: "hi"}
