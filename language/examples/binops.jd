
type Addable<T> = {
    "+": (T, T) => T,
}

const IntArrayAddable = Addable<Array<int>>{
    "+": (a: Array<int>, b: Array<int>) => concat<int>(a, b),
}

[1] + [2, 3]

// ok, but the real question is:

// type Eq<T> = {
//     "==": (T, T) => bool
// }

// ugh ok I really need a tuple type
// const arrayEq: <T,>(Array<T>, Array<T>, Eq<T>) => bool
//  = <T,>(one: Array<T>, two: Array<T>, eq: Eq<T>): bool => {
//     switch (one, two) {
//         ([], []) => true,
//         ([one, ...rone], [two, ...rtwo]) => if eq."=="(one, two) {
//             arrayEq(rone, rtwo, eq)
//         } else {
//             false
//         },
//         _ => false
//     }
// }

// const IntEq = Eq<int>{ "==": (a: int, b: int) => intEq(a, b) }

const goToTown = (t: Tuple2<int, int>) => t.0
goToTown((2, 3)) == 2

// const ArrayEq = <T,>(eq: Eq<T>) => Eq<Array<T>>{
//     "==": (one: Array<T>, two: Array<T>) => 
//     len(one) == len(two) && arrayEq(one, two, eq)
// }

// STOPSHIP: Next, get a prelude going so I can predefine IntEq and stuff.
// and make adding builtins much easier.

// vvvvvvv

ArrayEq<int>(IntEq)."=="([1, 2], [1, 2])
ArrayEq<int>(IntEq)."=="([1, 2, 3], [1, 2, 3])

// ^^^^^^^

// const aiq = ArrayEq<int>(IntEq)
// How do we build this on the fly?
[1, 2] == [1, 2]

// So if we see `A<B>`, we look for `<T>(eq: Eg<T>) => Eq<A<T>>`
// and `Eq<B>`
// and construct the dealio

// hm ok new plan, it just gets constant lifted (and hashed I guess? might as well)

1 + 2 * 3 == 7

type Addable<T> = {
    "+": (T, T) => T,
}

type AddSub<T> =  {
    "+": (T, T) => T,
    "-": (T, T) => T,
}

type Scale<T> = {
    scale: (T, float) => T,
}