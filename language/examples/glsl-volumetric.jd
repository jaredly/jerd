
@ffi
type Vec2 = {
    x: float,
    y: float
}

@ffi
type Vec3 = {
    ...Vec2,
    z: float
}

@ffi
type Vec4 = {
    ...Vec3,
    w: float,
}

@ffi
type Mat4 = {
    r1: Vec4,
    r2: Vec4,
    r3: Vec4,
    r4: Vec4,
}

@unique(0.0)
type AddSub<A, B, C> = {
    "+": (A, B) => C,
    "-": (A, B) => C
}

@unique(1.0)
type Mul<A, B, C> = {
    "*": (A, B) => C
}

@unique(2.0)
type Div<A, B, C> = {
    "/": (A, B) => C
}

const AddSubVec4 = AddSub<Vec4, Vec4, Vec4>{
    "+": (one: Vec4, two: Vec4) => Vec4{x: one.x + two.x, y: one.y + two.y, z: one.z + two.z, w: one.w + two.w},
    "-": (one: Vec4, two: Vec4) => Vec4{x: one.x - two.x, y: one.y - two.y, z: one.z - two.z, w: one.w - two.w},
}

const AddSubVec3 = AddSub<Vec3, Vec3, Vec3>{
    "+": (one: Vec3, two: Vec3) => Vec3{x: one.x + two.x, y: one.y + two.y, z: one.z + two.z},
    "-": (one: Vec3, two: Vec3) => Vec3{x: one.x - two.x, y: one.y - two.y, z: one.z - two.z},
}

const AddSubVec2 = AddSub<Vec2, Vec2, Vec2>{
    "+": (one: Vec2, two: Vec2) => Vec2{x: one.x + two.x, y: one.y + two.y},
    "-": (one: Vec2, two: Vec2) => Vec2{x: one.x - two.x, y: one.y - two.y},
}

const AddSubVec2_ = AddSub<Vec2, float, Vec2>{
    "+": (one: Vec2, two: float) => Vec2{x: one.x + two, y: one.y + two},
    "-": (one: Vec2, two: float) => Vec2{x: one.x - two, y: one.y - two},
}

const AddSubVec3_ = AddSub<Vec3, float, Vec3>{
    "+": (one: Vec3, two: float) => Vec3{x: one.x + two, y: one.y + two, z: one.z + two},
    "-": (one: Vec3, two: float) => Vec3{x: one.x - two, y: one.y - two, z: one.z - two},
}

const MulVec3 = Mul<Vec3, Vec3, Vec3>{
    "*": (one: Vec3, two: Vec3) => Vec3{x: one.x * two.x, y: one.y * two.y, z: one.z * two.z},
}

const ScaleVec3_ = Mul<Vec3, float, Vec3>{
    "*": (v: Vec3, scale: float) => Vec3{x: v.x * scale, y: v.y * scale, z: v.z * scale}
}

const ScaleVec3 = Mul<float, Vec3, Vec3>{
    "*": (scale: float, v: Vec3) => Vec3{x: v.x * scale, y: v.y * scale, z: v.z * scale}
}

const Scale4 = Div<Vec4, float, Vec4>{
    "/": (v: Vec4, scale: float) => Vec4{x: v.x / scale, y: v.y / scale, z: v.z / scale, w: v.w / scale}
}

const MulVec2 = Div<Vec2, Vec2, Vec2>{
    "/": (v: Vec2, scale: Vec2) => Vec2{x: v.x / scale.x, y: v.y / scale.y}
}

const ScaleVec3Rev = Div<Vec3, float, Vec3>{
    "/": (v: Vec3, scale: float) => Vec3{x: v.x / scale, y: v.y / scale, z: v.z / scale}
}

const Vec2float = Mul<Vec2, float, Vec2>{
    "*": (v: Vec2, scale: float) => Vec2{x: v.x * scale, y: v.y * scale}
}

const ScaleVec2Rev = Div<Vec2, float, Vec2>{
    "/": (v: Vec2, scale: float) => Vec2{x: v.x / scale, y: v.y / scale}
}

const negVec3 = (v: Vec3) => {
    Vec3{x: -v.x, y: -v.y, z: -v.z}
}

const length2 = (v: Vec2) => {
    sqrt(v.x * v.x + v.y * v.y)
}
const length = (v: Vec3) => {
    sqrt(v.x * v.x + v.y * v.y + v.z * v.z)
}

const radians = (degrees: float) => degrees / 180.0 * PI

const normalize = (v: Vec3) => v / length(v)

const vec3 = (v: Vec2, z: float) => Vec3{...v, z: z}

const dot = (a: Vec3, b: Vec3) => {
    a.x * b.x + a.y * b.y + a.z * b.z
}

const dot2 = (a: Vec2, b: Vec2) => {
    a.x * b.x + a.y * b.y
}

const dot4 = (a: Vec4, b: Vec4) => {
    a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w
}

const reflect = (I: Vec3, N: Vec3) => {
    I - 2.0 * dot(N, I) * N
}

const distance = (one: Vec3, two: Vec3) => length(two - one)
const distance2 = (one: Vec2, two: Vec2) => length2(two - one)

const vec4 = (x: float, y: float ,z: float, w: float) => Vec4{x:x, y:y, z:z, w:w}

const MatByVector = Mul<Mat4, Vec4, Vec4>{
    "*": (mat: Mat4, vec: Vec4) => Vec4{
        x: dot4(mat.r1, vec),
        y: dot4(mat.r2, vec),
        z: dot4(mat.r3, vec),
        w: dot4(mat.r4, vec)
    }
}

const xyz = (v: Vec4) => Vec3{x: v.x, y: v.y, z: v.z}

const clampF = (v: float, minv: float, maxv: float) => max(min(v, maxv), minv)

const clamp = (v: Vec3, min: Vec3, max: Vec3) => Vec3{
    x: clampF(v.x, min.x, max.x),
    y: clampF(v.y, min.y, max.y),
    z: clampF(v.z, min.z, max.z),
}

const roundv2 = (v: Vec2) => Vec2{
    x: round(v.x),
    y: round(v.y),
}

const roundv = (v: Vec3) => Vec3{
    x: round(v.x),
    y: round(v.y),
    z: round(v.z),
}

// END GLSL PRELUDE


// Ok, so now what I want to do
// is make a bunch of circles
// and, like,
// do I need an array for that?
// Can I turn an array reduce into ...
// something?
// Should I have a builtin "range"?
// And then "reduce" + "range" just becomes a for loop accumulator?
// That sounds reasonable.

const sminCubic = ( a: float, b: float, k: float ) =>
{
    const h = max( k - abs(a - b), 0.0 ) / k;
    const sixth = 1.0 / 6.0;
    min( a, b ) - h * h * h * k * sixth;
}

const opRepLim = ( p: Vec3, c: float, l: Vec3) => {
    p - c * clamp(roundv(p / c), negVec3(l), l);
}

const fract = (v: float) => v - floor(v)

const random = (st: Vec2) => {
    fract(sin(dot2(st, Vec2{x: 12.9898, y: 78.233})) * 43758.5453123);
}

const PHI = 1.61803398874989484820459  // Î¦ = Golden Ratio   

const random3 = (xy: Vec2, seed: float) => {
    fract(tan(distance2(xy * PHI, xy) * seed) * xy.x);
}

// const random = (xy: Vec2) => {
//     fract(tan(distance2(xy * PHI, xy) * 200.0) * xy.x);
// }

const vmax = (v: Vec3) => {
    max(max(v.x, v.y), v.z);
}

const random2 = (co: Vec2) => {
    const a = 12.9898;
    const b = 78.233;
    const c = 43758.5453;
    const dt = dot2(co, Vec2{x: a,y: b});
    const sn = mod(dt, 3.14);
    fract(sin(sn) * c);
}

const vabs = (v: Vec3) => Vec3{x: abs(v.x), y: abs(v.y), z: abs(v.z)}

const box = (samplePoint: Vec3, pos: Vec3, dims: Vec3) => {
    vmax(vabs(samplePoint - pos) - dims)
}

// const boxes = (samplePoint: Vec3, center: Vec3, count: int, dims: Vec3, spacing: float) => {
//     if count <= 1 {
//         vmax(vabs(p1)) - dims
//     }
// }

const sceneSDF = (iTime: float, samplePoint: Vec3) => {
    const double = iTime * 2.0;
    // const p2 = samplePoint - Vec3{
    //     x: -sin(double) / 2.0,
    //     y: sin(iTime / 4.0) / 2.0,
    //     z: cos(double) / 2.0,
    // };
    // const p1 = samplePoint;

    const p1 = opRepLim(samplePoint, 0.3, Vec3{
        x: 2.0,
        y: 0.0,
        z: 0.0,
    });
    // const p2 = opRepLim(p2, 0.1, Vec3{
    //     x: 1.0,
    //     y: 1.0,
    //     z: 1.0,
    // });

    min(
        max(
            vmax(vabs(p1) - Vec3{x: 0.1, y: 0.3, z: 0.4}),
            -vmax(vabs(p1) - Vec3{x: 0.11, y: 0.2, z: 0.3})
        ),
        vmax(vabs(samplePoint - Vec3{
            x: 0.0,
            y: 0.0,
            z: -5.0,
        }) - Vec3{x: 1.4, y: 1.4, z: 0.3})
    )
}


const rotate = (tx: float, ty: float, tz: float) => {
    // gamma, beta, alpha
    const cg = cos(tx); // roll
    const sg = sin(tx);
    const cb = cos(ty); // pitch
    const sb = sin(ty);
    const ca = cos(tz); // yaw
    const sa = sin(tz);

    Mat4{
        r1: vec4(ca * cb, ca * sb * sg - sa * cg, ca * sb * cg + sa * sg, 0.0),
        r2: vec4(sa * cb, sa * sb * sg + ca * cg, sa * sb * cg - ca * sg, 0.0),
        r3: vec4(-sb, cb * sg, cb * cg, 0.0),
        r4: vec4(0.0, 0.0, 0.0, 1.0)
    };
}

const rotateY = (theta: float) => {
    const c = cos(theta);
    const s = sin(theta);

    Mat4{
        r1: vec4(c, 0.0, s, 0.0),
        r2: vec4(0.0, 1.0, 0.0, 0.0),
        r3: vec4(-s, 0.0, c, 0.0),
        r4: vec4(0.0, 0.0, 0.0, 1.0)
    };
}

const rotate3 = (v: Vec3, x: float, y: float, z: float) => {
    xyz(rotate(x, y, z) * Vec4{...v, w: 1.0})
}

const sceneSDFsingle = (iTime: float, samplePoint: Vec3) => {
    const double = iTime * 2.0;
    // const p2 = samplePoint - Vec3{
    //     x: -sin(double) / 2.0,
    //     y: sin(iTime / 4.0) / 2.0,
    //     z: cos(double) / 2.0,
    // };
    // const p1 = samplePoint;
    const pBack = samplePoint - Vec3{
        x: 0.0,
        y: 0.0,
        z: -5.0,
    };
    // const samplePoint = rotate3(samplePoint, 0.0, PI / 8.0, 0.0);
    const samplePoint = rotate3(samplePoint, 0.0, PI / 3.0, 0.0);

    // const p1 = opRepLim(samplePoint, 0.4, Vec3{
    //     x: 1.0,
    //     y: 1.0,
    //     z: 0.0,
    // });
    const p1 = samplePoint;
    const samplePoint = samplePoint - Vec3{x: 0.0, y: 0.0, z: -0.20};

    // const samplePoint = rotate3(samplePoint, 1.0 * PI / 4.0, 2.0 * PI / 4.0, 2.0 * PI / 4.0);
    // const p1 = opRepLim(samplePoint, 0.3, Vec3{
    //     x: 2.03
    //     y: 0.0,
    //     z: 0.0,
    // });
    // const p2 = opRepLim(p2, 0.1, Vec3{
    //     x: 1.0,
    //     y: 1.0,
    //     z: 1.0,
    // });

    min(
        min(
            max(
                vmax(vabs(samplePoint) - 0.2),
                -vmax(vabs(samplePoint) - Vec3{x: 0.15, y: 0.15, z: 0.3})
            ),
            vmax(vabs(pBack) - Vec3{x: 1.4, y: 1.4, z: 0.3})
        ),
        vmax(vabs(p1) - Vec3{
            x: 0.10, y: 0.10, z: 0.02
        }),
    )
}

const MAX_MARCHING_STEPS = 255
const MIN_DIST = 0.0
const MAX_DIST = 100.0
const EPSILON = 0.00005

const shortestDistanceToSurface:
(float, Vec3, Vec3, float, float, int) => float
    = (
        iTime: float,
        // marchSource
        eye: Vec3,
        // marchDirection
        marchingDirection: Vec3,
        start: float,
        end: float,
        stepsLeft: int,
    ) => {
    if stepsLeft <= 0 {
        end
    } else {
        const dist = sceneSDF(iTime, eye + start * marchingDirection);
        if dist < EPSILON {
            start
        } else {
            const depth = start + dist;
            if depth >= end {
                end
            } else {
                shortestDistanceToSurface(iTime, eye, marchingDirection, depth, end, stepsLeft - 1)
            }
        }
    }
}



// /**
//  * Return the normalized direction to march in from the eye point for a single pixel.
//  * 
//  * fieldOfView: vertical field of view in degrees
//  * size: resolution of the output image
//  * fragCoord: the x,y coordinate of the pixel in the output image
//  */
const rayDirection = (fieldOfView: float, size: Vec2, fragCoord: Vec2) => {
    const xy = fragCoord - size / 2.0;
    const z = size.y / tan(radians(fieldOfView) / 2.0);
    normalize(vec3(xy, -z))
}

// /**
//  * Using the gradient of the SDF, estimate the normal on the surface at point p.
//  */
// TODO: pass in a function here! Of course will have to be constant folded.
const estimateNormal = (iTime: float, p: Vec3) => normalize(Vec3{
    x: sceneSDF(iTime, Vec3{...p, x: p.x + EPSILON}) - sceneSDF(iTime, Vec3{...p, x: p.x - EPSILON}),
    y: sceneSDF(iTime, Vec3{...p, y: p.y + EPSILON}) - sceneSDF(iTime, Vec3{...p, y: p.y - EPSILON}),
    z: sceneSDF(iTime, Vec3{...p, z: p.z + EPSILON}) - sceneSDF(iTime, Vec3{...p, z: p.z - EPSILON}),
})

// /**
//  * Lighting contribution of a single point light source via Phong illumination.
//  * 
//  * The vec3 returned is the RGB color of the light's contribution.
//  *
//  * k_a: Ambient color
//  * k_d: Diffuse color
//  * k_s: Specular color
//  * alpha: Shininess coefficient
//  * p: position of point being lit
//  * eye: the position of the camera
//  * lightPos: the position of the light
//  * lightIntensity: color/intensity of the light
//  *
//  * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description
//  */

const phongContribForLight = (
    iTime: float,
    k_d: Vec3,
    k_s: Vec3,
    alpha: float,
    p: Vec3,
    eye: Vec3,
    lightPos: Vec3,
    lightIntensity: Vec3,
) => {
    // TODO: Make structs please! Would be very nice to have multi-value returns.
    const N = estimateNormal(iTime, p);
    const L = normalize(lightPos - p);
    const V = normalize(eye - p);
    // oooh now we'll have to deal with multiple names for things!
    // I do declare
    const R = normalize(reflect(negVec3(L), N));

    // Normal vs direction of the light
    const dotLN = dot(L, N);
    if dotLN < 0.0 {
        Vec3{x: 0.0, y: 0.0, z: 0.0}
    } else {
        const dotRV = dot(R, V);
        if dotRV < 0.0 {
            const m = k_d * dotLN;
            lightIntensity * m
        } else {
            const m = k_d * dotLN + k_s * pow(dotRV, alpha);
            lightIntensity * m
        }
    }
}

// /**
//  * Lighting via Phong illumination.
//  * 
//  * The vec3 returned is the RGB color of that point after lighting is applied.
//  * k_a: Ambient color
//  * k_d: Diffuse color
//  * k_s: Specular color
//  * alpha: Shininess coefficient
//  * p: position of point being lit
//  * eye: the position of the camera
//  *
//  * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description
//  */
const phongIllumination = (iTime: float, k_a: Vec3, k_d: Vec3, k_s: Vec3, alpha: float, p: Vec3, eye: Vec3) => {
    const ambientLight = 0.5 * Vec3{x: 1.0, y: 1.0, z: 1.0};
    const color = ambientLight * k_a;
    
    const light1Pos = Vec3{x: 4.0 * sin(iTime),
                          y: 2.0,
                          z: 4.0 * cos(iTime)};
    const light1Intensity = Vec3{x: 0.4, y: 0.4, z: 0.4};
    
    const color = color + phongContribForLight(iTime, k_d, k_s, alpha, p, eye,
                                  light1Pos,
                                  light1Intensity);
    
    const light2Pos = Vec3{x: 2.0 * sin(0.37 * iTime),
                          y: 2.0 * cos(0.37 * iTime),
                          z: 2.0};
    const light2Intensity = Vec3{x: 0.4, y: 0.4, z: 0.4};
    
    const color = color + phongContribForLight(iTime, k_d, k_s, alpha, p, eye,
                                  light2Pos,
                                  light2Intensity);    
    color
}

const white = Vec3{x: 1.0,y: 1.0,z: 1.0}
const red = Vec3{x: 1.0,y: 0.0,z: 0.0}
const blue = Vec3{x: 0.0,y: 0.0,z: 1.0}
const green = Vec3{x: 0.0,y: 1.0,z: 0.0}
const black = Vec3{x: 0.0,y: 0.0,z: 0.0}

/**
 * What do I want this to do?
 * - produce a parallel function called `justRedGLSL`
 *   that accepts any initialization variables
 *   and calls `new GlslCanvas`?
 *   OR do I just have a separate pass, that's not the
 *   javascript one? Lets start with that tbh.
 */
const justRed = (iTime: float, fragCoord: Vec2, iResolution: Vec2) => {
    Vec4{...red, w: 1.0}
}

// @ffi
// @main
const phongLit = (iTime: float, fragCoord: Vec2, iResolution: Vec2) => {
    // The direction to march in from the eye position
    // which will then find the color of the provided pixel
	const dir = rayDirection(45.0, iResolution, fragCoord);
    const eye = Vec3{x: 0.0, y: 0.0, z: 5.0};
    const dist = shortestDistanceToSurface(iTime, eye, dir, MIN_DIST, MAX_DIST, MAX_MARCHING_STEPS);

    if dist > MAX_DIST - EPSILON {
        // Didn't hit anything
        Vec4{x: 0.0, y: 0.0, z: 0.0, w: 1.0};
    } else {
        const worldPosForPixel = eye + dist * dir;
        
        const K_a = Vec3{x: 0.9, y: 0.2, z: 0.3};
        const K_d = Vec3{x: 0.0, y: 0.2, z: 0.7};
        const K_s = Vec3{x: 1.0, y: 1.0, z: 1.0};
        const shininess = 10.0;

        const color = phongIllumination(iTime, K_a, K_d, K_s, shininess, worldPosForPixel, eye);

        Vec4{...color, w: 1.0};
    }
}


const isPointingTowardLight = (iTime: float, p: Vec3, lightPos: Vec3) => {
    const N = estimateNormal(iTime, p);
    const L = normalize(lightPos - p);

    const dotLN = dot(L, N);
    dotLN >= 0.0
}

const avg = (one: Vec4, two: Vec4): Vec4 => {
    const both = one + two;
    both / 2.0
}

// const clearPath = (sample: Vec3, light: Vec3) => {
//     const dist = 
// }

const volumetricSample = (iTime: float, light: Vec3, eye: Vec3, dist: float, percent: float, dir: Vec3, left: int) => {
    const rdist = percent * dist;
    const sample = eye + rdist * dir;
    const lightDist = distance(sample, light);

    const toLight = sample - light;
    const marchToLight = shortestDistanceToSurface(
        iTime, sample, -1.0 * normalize(toLight), 0.0, lightDist, MAX_MARCHING_STEPS,
    );

    if marchToLight >= lightDist - 0.1 {
        dist / pow(1.0 + lightDist, 2.0)
    } else {
        0.0
    }
}

const volumetric : (float, Vec2, Vec3, Vec3, float, Vec3, float, int, float) => float
 = (iTime: float, seed: Vec2, light: Vec3, eye: Vec3, dist: float, dir: Vec3, current: float, left: int, total: float) => {
    if left <= 0 {
        current
    } else {
        const percent = left as float / total;
        // const percent = random(Vec2{x: seed.x, y: seed.y + left as float});
        const sample = volumetricSample(iTime, light, eye, dist, percent, dir, left);
        volumetric(
            iTime,
            seed,
            light,
            eye,
            dist,
            dir,
            current + sample,
            left - 1,
            total
        )
    }
    // random(Vec2{x: seed, y: 1.0}) * 10.0
}

const lightSurface = (
    iTime: float,
    worldPosForPixel: Vec3,
    light1Pos: Vec3,
    light: float,
    hit: float,
) => {
        if isPointingTowardLight(iTime, worldPosForPixel, light1Pos) {
            const toLight = light1Pos - worldPosForPixel;
            const marchToLight = shortestDistanceToSurface(
                iTime, light1Pos, -1.0 * normalize(toLight), MIN_DIST, MAX_DIST, MAX_MARCHING_STEPS,
            );

            if marchToLight > MAX_DIST - EPSILON * 10.0 {
                Vec4{...white * light, w: 1.0}
            } else {
                const offset = marchToLight - length(toLight);
                const penumbra = 0.1;
                // In shadow!
                if offset < -EPSILON * 1000.0 {
                    Vec4{...white * light, w: 1.0}
                } else {
                    Vec4{...white * hit, w: 1.0}
                }
            }
        } else {
            Vec4{...white * light, w: 1.0}
        };

}

// @ffi
// @main
const fishingBoueys = (iTime: float, fragCoord: Vec2, iResolution: Vec2) => {
    // The direction to march in from the eye position
    // which will then find the color of the provided pixel
	const dir = rayDirection(45.0, iResolution, fragCoord);
    const eye = Vec3{x: 0.0, y: 0.0, z: 5.0};
    // TODO: trace!()
    const dist = shortestDistanceToSurface(iTime, eye, dir, MIN_DIST, MAX_DIST, MAX_MARCHING_STEPS);


    if dist > MAX_DIST - EPSILON {
        // Nothing visible
        Vec4{x: 0.0, y: 0.0, z: 0.0, w: 1.0};
    } else {
        const worldPosForPixel = eye + dist * dir;

        const light1Pos = Vec3{
            x: 0.0 + sin(iTime) / 2.0,
            y: 0.0,
            // x: 0.5 * sin(iTime / 2.0),
            // y: 0.5 * cos(iTime / 2.0),
            z: 0.0
        };


        const light1Pos = Vec3{ x: 0.0, y: 0.0, z: 0.0 };


        const surfaces = lightSurface(
            iTime, worldPosForPixel, light1Pos, 0.0, 0.01);
        const samples = sin(iTime * 0.5) * 10.0 + 20.0;
        // const samples = samples as int;
        
        const brightness = volumetric(
            iTime,
            // random() + iTime, // random(Vec2{x: iTime / 100.0, y: 0.0}),
            fragCoord / iResolution + iTime / 1000.0, //iTime,
            // fragCoord.x + fragCoord.y * iResolution.y,
            light1Pos,
            eye,
            dist,
            dir,
            0.0,
        samples as int, samples) * 1.0 / samples;

        // avg(surfaces, Vec4{...white * brightness, w: 1.0})
        Vec4{...white * brightness, w: 1.0}
        // surfaces
    }
}

    // const d = distance(eye, worldPos)
//     p = pix_position(i, j)
//     hit = march(i, j)
//     d = distance(hit, p)

//     start with a black pixel value.
//     pix_value = 0

//     n is the number of samples per pixel, e.g., 10
//     repeat n:
//     sample = line_sample(p, hit)
//     light = light_sample()

//     check if the point inside the light 
//     source is visible from the point on
//     the line from the pixel
//     if clear_path(sample, light):
//         pix_value += d / pow(1 + distance(sample, light), 2)

//     the result should be scaled so that it lies
//     between 0 and 1, adjust light_strength accordingly
//     pix_value *=  light_strength/n 

@ffi
@main
const randFolks = (iTime: float, fragCoord: Vec2, iResolution: Vec2) => {
    const scale = 40.0;
    const small = roundv2(fragCoord / scale) * scale;
    const small = Vec2{x: small.x, y: small.y + iTime};
    // const v = random(small / iResolution) / 10.0 + 0.9;
    const v = random(small / iResolution) / 10.0 + 0.9;
    const bouey = fishingBoueys(iTime, fragCoord, iResolution);
    // const two = Vec4{...blue * v, w: 1.0} + bouey;
    // two / 2.0
    bouey
}

// const volumetric
