
type Pos = {x: int, y: int}

// @main
const simple = (
    env: GLSLEnv,
    pos: Vec2,
) ={}> {
    vec4(
        if pos > vec2(10.0, 20.0) {
            1.0
        } else {
            2.0
        },
    );
}

const inner: ((float) ={}> float) ={}> float = (v: (float) ={}> float) ={}> {
    const m = (2.0 + 3.0);
    v((10.0 + (m * m)));
}

const outer: ((float) ={}> float, bool) ={}> (GLSLEnv, Vec2) ={}> Vec4 = (
    v: (float) ={}> float,
    m: bool,
) ={}> (env: GLSLEnv, p: Vec2) ={}> {
    const z = (p.x + p.y);
    const m = z;
    vec4(inner(v), p.y, m, m);
}

// @main
const z = outer((m: float) ={}> (m / 2.0), true)

// @main
const goToTown = (
    env: GLSLEnv,
    pos: Vec2,
) ={}> {
    vec4(
        if (pos < vec2(10.0, 50.0)) {
            vec3(1.0, 0.0, 0.0);
        } else if pos.x < 20.0 {
            vec3(1.0, 1.0, 0.0);
        } else {
            vec3(0.0, 0.0, 0.0);
        },
        1.0,
    );
}

const marchNormals = (sdf: (env: GLSLEnv, pos: Vec3) => float) => (env: GLSLEnv, pos: Vec2) => {
    const one = sdf(env, vec3(pos, 0.0));
    const two = sdf(env, vec3(pos, 1.0));
    if one > two {
        vec4(0.0)
    } else {
        vec4(1.0)
    }
}

const superSample = (sdf: (env: GLSLEnv, pos: Vec2) => Vec4) => 
    (env: GLSLEnv, pos: Vec2) => (sdf(env, pos) + sdf(env, pos + vec2(0.0, 0.5))) / 2.0

@main
const m = superSample(
    sdf: marchNormals(sceneSDF: (env: GLSLEnv, pos: Vec3): float ={}> length(v: pos) - 0.5),
)