// Very basic

/** Basics */

true

"hi" == "hi"

const freturn = () => "yes"

freturn() == "yes"

const call = () => freturn() + "a"

call() == "yesa"

const arg = (arg: string): string => arg ++ "1"

arg("2") == "21"

const identity = <T,>(x: T): T => x

identity<string>("5") ++ "4" == "54"

2 == 1 + 1

// pemdas folks
2 + 3 * 4 == 16 - 2

@typeError("float vs int")
2.2 * 2 == 1.1

2.2 * 2.0 == 4.4

2 ^ 3 == 8

sqrt(2.0 * 2.0) == 2.0

/** Effects */

effect GetString {
    get: () => string,
}

const provideString:
    (string) => (() ={GetString}> string) => string
 = (responseValue: string) => (fn: () ={GetString}> string) => {
    handle! fn {
        GetString.get(() => k) => provideString(responseValue ++ ".")(() => k(responseValue)),
        pure(a) => a
    }
}

provideString("hi")(() ={GetString}> "m") == "m"

// BROKEN: if I'm passing a "pure" function into something that expects
// an effectful function, I need to make a CPS wrapper:
// `(arg, arg, _handlers, done) => done(thefn(arg, arg))`

const impure: () ={GetString}> string = () ={GetString}> "A"
provideString("hi")(impure) == "A"

const pure: () ={}> string = () => "AA"
// provideString("hi")(() ={GetString}> pure()) == "AA"

// Wrapping a pure function for CPS
provideString("hi")(() ={GetString}> pure()) == "AA"
provideString("hi")(() ={GetString}> "m") == "m"

const provideStringWithArg:
    (string) => (string, (string) ={GetString}> string) => string
 = (responseValue: string) => (passIn: string, fn: (string) ={GetString}> string) => {
    handle! () => fn(passIn) {
        GetString.get(() => k) => provideString(responseValue ++ ".")(() => k(responseValue)),
        pure(a) => a
    }
}

provideStringWithArg("hi")("Passed in", (arg: string) ={GetString}> arg ++ "-m") == "Passed in-m"


// How to assert type errors?
// yeah it would definitely be good to be able to do that.
