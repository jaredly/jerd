
// type Person = {
//     ...HasName,
//     ...HasAge,
//     what: int,
// }

type Id = {
    hash: string,
    size: int,
    pos: int,
}

// type UserReference = {
//     id: Id
// }
// enum Reference {
//     Builtin{name: string},
//     =UserReference
// }

type Some<T> = {
    value: T
}
type None = {}


enum Option<T> {
    Some<T>,
    None
}

type Twice<T> = {
    one: T,
    two: T,
}

enum OptionOrTwice<T> {
    ...Option<T>,
    Twice<T>
}

const x = Option<int>:Some<int>{_: 10}
const y = Option<int>:None
// Option<int> is a subtype of OptionOrTwice<int>, so this works
const y1 = OptionOrTwice<int>:y
const y2 = OptionOrTwice<int>:Twice<int>{one: 3, two: 10}

switch y2 {
    Twice{one, two} => one + two,
    _ => 0
} == 13

const y1t = (y1: OptionOrTwice<int>) => switch y1 {
    Twice{one, two} => one + two,
    None => 2,
    _ => 0
}

y1t(y1) == 2

const something = Some<int>{_: 10}
// We can do enum conversion on variables too
const asOption = Option<int>:something

const isPresent = <T,>(x: Option<T>): bool => {
    switch x {
        Some => true,
        None => false
    }
}

isPresent<int>(Option<int>:Some<int>{_: 3}) == true
isPresent<int>(Option<int>:None) == false

const getWithDefault = <T,>(x: Option<T>, default: T): T => {
    switch x {
        Some{_: v} => v,
        None => default,
    }
}

getWithDefault<int>(Option<int>:None, 20) == 20
getWithDefault<int>(Option<int>:Some<int>{_: 3}, 20) == 3

@typeError("doesn't fit enum")
Option<string>:Some<int>{_: 10}

@typeError("Bodies of case arms don't agree")
switch 10 { 4 => 10, 10 => true }

switch None { None => true }

// um what were the other errors I wanted to verify?

const isTen = (n: int) => switch n {
    4 => false,
    10 => true,
    _ => false
}

isTen(10) == true

const isSomeYes = (v: Option<string>) => switch v {
    Some{_: "no"} => false,
    None => false,
    Some{_: v} => v == "yes"
}

isSomeYes(Option<string>:Some<string>{_: "yes"}) == true

@typeError("Not exhaustive")
switch Option<string>:Some<string>{_: "yes"} {
    Some{_: "no"} => false,
    None => false,
}

@typeError("found int#builtin, expected string#builtin")
switch Option<string>:Some<string>{_: "yes"} {
    Some{_: 5} => false,
    None => false,
    Some{_: v} => v == "yes"
}

@typeError("doesn't fit enum")
Option<string>:Some<int>{_: 10}

@typeError("Not exhaustive")
switch 10 {
    10 => true
}

@typeError("Not exhaustive")
switch "hi" {
    "ho" => true
}

@typeError("Not exhaustive")
switch true {
    false => false
}

const isNotFalse = (n: bool) => switch n {
    false => false,
    _ => true
}

isNotFalse(true) == true

@typeError("Not exhaustive")
switch y {
    None => true
}

const isAs = (y: Option<int>) =>
// Type refinement please
switch y {
    Some as x => x.value == 2,
    None => true
}

isAs(y)

const check = (y1: OptionOrTwice<int>) => switch y1 {
    Twice{two: 5} => false,
    Twice => false,
    Option as x => switch x {
        Some => false,
        None => true
    },
}

check(y1)

/*

const d = {type: "some", contents: "yes"}

if (d.type === 'some' && d.contents === 'no') {
    retur false
} else if (d.type === 'none') {
    return false
} else if (d.type === 'some') {
    return d.contents > 'hi'
}

switch v {
    [x, ...y, 10, 1] => true,
    [] => false,
    [2, 3 as x] => true
}

- ok what if the plan was:
- you have bindings, and conditions, and such.
- also I need to make sure uniques are actually unique. probably per-term

ok new plan. doesn't use "else".
just return when you're done.

let _handled = false

if (v.length >= 3) {
    const x = v[0]
    const y = v.slice(1, -2)
    if (v[v.length - 1] === 1) {
        if (v[v.length - 2] === 10) {
            _handled = true
            return true
        }
    }
}

// hmm does this work for the 'let binding' case?
// I guess for let-bindings we don't have conditional success.
// so its very different.





if (v.length >= 3) {

} else {
    if (v.length === 0) {
    
    } else {
        if (v.length === 2) {

        }
    }
}

if (v.length >= 3 && v[v.length - 2] === 10 && v[v.length - 1] === 1) {
    const x = v[0]
    const y = v.slice(1, -2)
    return true
}


*/


// This now has type `Option<never>:None`, which can be coerced to anything.
// const z = Option:None

// Ok type-time representation of an enum value:
// its like...
// um do I need one?
// it's just a ref, right?
// And then you go to the definition, and plug & play type variable substitutions and such.
// yeah that should be fine.

/*

Ok I think I have a plan.

`EnumName:expression` is a type coersion of sorts.
if the expression resolves to a record that's part of this enum
or a subtype of this enum
then it's good!
otherwise it's a type error.
And maybe that's the whole shebang?
I'll want to do nice inference on type variables.

Also: `Option:None` becomes `Option<never>:None` which *is* a subtype
of any other kind of option. because never can't be produced, we have
a guarentee that any value that has the never type variable doesn't
actually use that variable.

*/
