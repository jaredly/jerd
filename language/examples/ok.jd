
type Some<T> = {
    value: T
}
type None = {}

enum Option<T> {
    Some<T>,
    None
}

// @typeError("found int, expected string")
Option<string>:Some<string>{_: "hi"}

type Nil = {}
type Cons<T, L> = {
    value: T,
    rest: L
}

enum LinkedList<T> {
    Nil,
    Cons<T, LinkedList<T>>,
}

const listToLinked: <T,>(Array<T>) => LinkedList<T>
 = <T,>(list: Array<T>): LinkedList<T> => {
    switch list {
        [] => LinkedList<T>:Nil,
        [one, ...rest] => LinkedList<T>:Cons<T, LinkedList<T>>{
            value: one,
            rest: listToLinked(rest),
        }
    }
} 
