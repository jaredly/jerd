


effect Read {
    read: () => string,
}

effect Write {
    write: (string) => void,
}

const getString = () ={Read}> raise!(Read.read())

(a: int, b: string) ={Read, Write}> b + getString()

const both = () ={Read, Write}> {
    const value = raise!(Read.read());
    raise!(Write.write(value))
}
// Checking that this type checks and looks reasonable
both

const rec provideIncrement: <T>(string, int, () ={Read}> T) => T = <T,>(v: string, i: int, fn: () ={Read}> T) => handle! fn {
    Read.read(() => k) => provideIncrement<T>(v, i + 1, () ={Read}> k(v + i as string)),
    pure(v) => v,
}

// const expectWrite: <T>(string, () ={Write}> T)

// Ok now for the famous handlers!
const rec provideString: (string, () ={Read}> string) => string = (v: string, fn: () ={Read}> string) => handle! fn {
    Read.read(() => k) => provideString(v, () ={Read}> k(v + "got") + "back") + "provided",
    pure(v) => v + "pure"
}

provideString("Yes", getString) == "Yesgotbackpureprovided"

const rec provideStringPlain: <T>(string, () ={Read}> T) => T = <T,>(v: string, fn: () ={Read}> T) => handle! fn {
    Read.read(() => k) => provideStringPlain<T>(v, () ={Read}> k(v)),
    pure(v) => v,
}

const ifYes = () => {
    if getString() == "Yes" {
        "good"
    } else {
        "nope"
    }
}

provideStringPlain<string>("Yes", ifYes) + ":" + provideStringPlain<string>("Yes?", ifYes) == "good:nope"

const sideBar = (n: int) => {if n == 5 {
    getString()
} else {
    "wot"
}}

provideStringPlain<string>("Yes", () => sideBar(5)) + ":" + provideStringPlain<string>("Yes?", () => sideBar(4)) == "Yes:wot"

const callAgain = () ={Read}> {
    const v = getString();
    () => v
}

provideStringPlain<string>("what", () ={Read}> callAgain()()) == "what"

type Person = {name: string, age: int}

// () => Person{name: getString(), age: 5}

const getPerson = () => Person{name: getString(), age: 5}

const spreadPerson = () => Person{...getPerson(), age: 20}

provideStringPlain<Person>("Me", getPerson).name == "Me"
provideStringPlain<Person>("Me", spreadPerson).name == "Me"

provideIncrement<Array<string>>("Hi", 0, () => [getString(), getString()]) == ["Hi0", "Hi1"]
const getStringArr = () => [getString()]
provideIncrement<Array<string>>("Hi", 0, () => [...getStringArr(), getString()]) == ["Hi0", "Hi1"]

// Different done things
// START HERE: This needs to take things into account
// Somehow, we need to wrap the final done
// also why is my IFFE getting a handler passed to it ðŸ¤”
() => {
    raise!(Write.write("hello"));
    getString()
}

() => (getString(), 1.0).0

const getPersonName = () => Person{name: getString(), age: 5}.name

provideStringPlain<string>("ok", getPersonName) == "ok"

// Now for some variables!


const rec provideIncrementV: <T>{e}(string, int, () ={Read, e}> T) ={e}> T = <T,>{e}(v: string, i: int, fn: () ={Read, e}> T) ={e}> handle! fn {
    Read.read(() => k) => provideIncrementV<T>{}(v, i + 1, () ={Read}> k(v + i as string)),
    pure(v) => v,
}








/*
const logWrite: {e}(() ={Write, e}> void) ={e}> void = {e}(fn: () ={Write, e}> void) => {
    handle! fn {
        Write.write((x) => k) => {
            log(x);
            logWrite{e}(() ={Write, e}> k())
        },
        pure(k) => k
    }
}

logWrite{}(() => raise!(Write.write("Hello")))

const respondWith: {e}(string, () ={Read, e}> void) ={e}> void = {e}(v: string, fn: () ={Read, e}> void) => {
    handle! fn {
        Read.read(() => k) => respondWith{e}(v, () ={Read, e}> k(v)),
        pure(x) => x,
    }
}

respondWith{}("Hello", () => logWrite{Read}(() => {
    const v = "Yes " ++ raise!(Read.read());
    raise!(Write.write(v))
}))
*/





/*
type Some<T> = {
    value: T
}
type None = {}

enum Option<T> {
    Some<T>,
    None
}

// @typeError("found int, expected string")
Option<string>:Some<string>{_: "hi"}

type Nil = {}
type Cons<T, L> = {
    value: T,
    rest: L
}

enum LinkedList<T> {
    Nil,
    Cons<T, LinkedList<T>>,
}

type WithSelves = {
    name: string,
    selves: Array<WithSelves>,
}

const listToLinked: <T,>(Array<T>) => LinkedList<T>
 = <T,>(list: Array<T>): LinkedList<T> => {
    switch list {
        [] => LinkedList<T>:Nil,
        [one, ...rest] => LinkedList<T>:Cons<T, LinkedList<T>>{
            value: one,
            rest: listToLinked(rest),
        }
    }
} 

const linkedLength: <T>(LinkedList<T>) => int = <T,>(list: LinkedList<T>) => {
    switch list {
        Nil => 0,
        Cons{rest} => 1 + linkedLength<T>(rest)
    }
}

@typeError("same-typed arguments")
<T,>(list: LinkedList<T>) => {
    switch list {
        Nil => 0,
        Cons{rest} => 1 + rest
    }
}


linkedLength<int>(listToLinked<int>([3,4,5])) == 3

// enum Child#6db8c2b1<T#:0> {
//     String#54e44b4c,
//     T#:0,
// }

*/
