
effect Stdio {
    read: () => string,
    write: (string) => void,
}

const hello = () => {
    "hello world"
}

effect Log {
    log: (string) => void,
}


// Start iwth the basic
const collectNew: (() ={Log}> void) ={}> string = 
@newHandlers
(fn: () ={Log}> void): string => {
    handle! fn {
        Log.log((v) => k) => {
            v ++ "\n" ++ collectNew(() ={Log}> k())
        },
        pure(a) => "end"
    }
}

collectNew

// const collectNew: {e}(() ={Log, e}> void) ={e}> string = 
// @newHandlers
// {e}(fn: () ={Log, e}> void): string => {
//     handle! fn {
//         Log.log((v) => k) => {
//             v ++ "\n" ++ collectNew{e}(() ={e, Log}> k())
//         },
//         pure(a) => "end"
//     }
// }

// collectNew

// This is so we can test the results
const collect: {e}(() ={Log, e}> void) ={e}> string = {e}(fn: () ={Log, e}> void): string => {
    handle! fn {
        Log.log((v) => k) => {
            v ++ "\n" ++ collect{e}(() ={e, Log}> k())
        },
        pure(a) => "end"
    }
}

const log = (k: string) ={Log}> raise!(Log.log(k))

// TODO when I've got type arguments, make this generic.
const respondWith:
    (string) => <T>(() ={Stdio, Log}> T) ={Log}> T
 = (responseValue: string) => <T,>(fn: () ={Stdio, Log}> T) ={Log}> {
    handle! fn {
        Stdio.read(() => k) => respondWith(responseValue ++ ".")<T>(() ={Stdio, Log}> k(responseValue)),
        Stdio.write((v) => k) => {
            log(v);
            respondWith(responseValue ++ "-")<T>(() ={Stdio, Log}> k())
        },
        pure(a) => a
    }
}

// // TODO when I've got type arguments, make this generic.
// const respondWith:
//     <T>{e}(string) => (() ={Stdio, e}> T) ={e}> T
//  = <T,>{e}(responseValue) => (fn: () ={Stdio, e}> T) ={e}> {
//     handle! fn {
//         Stdio.read(() => k) => respondWith<T>{e}(responseValue ++ ".")(() => k(responseValue)),
//         Stdio.write((v) => k) => {
//             log(v);
//             respondWith<T>{e}(responseValue ++ "-")(k)
//         },
//         pure(a) => a
//     }
// }


/*
should become
const inner = (handlers, done) => {
    log("getting");
    raise(handlers, "hash", 0, (handlers, arg1) => {
        const arg2 = " and ";
        raise(handlers, "hash", 0, (handlers, arg2) => {
            log(arg1 + arg2 + arg3);
            const arg1 = "And then ";
            raise(handlers, "hash", 0, (handlers, arg2) => {
                log(arg1 + arg2)
                log("Dones");
            })
        })
    })
}

ok, so we have a block (sequence)
and the first one is a `log`
neither it nor any params are CPS, so it prints normally.
next, we have something with an arg that has arg effects.
so first lets do the unoptimized version.
log ( ++ (++ (raise, "and"), raise))
so the log says
"arg 1, do your thing, assign yourself to "arg1"", then get back to me?
erm or log constructs itself as it would like to be treated
and then passes itself as the continuation?
and then what about the next bit?
the next bit says "here's me"
because this apply doesn't need anything special
yeah.

ok so usually people solve this by doing a-reduction or whatnot.
but while that is "clean" from an impl standpoint, the resulting
code is ridiculous.

party("one", log("awesome", farther("Farther")))
->
let p = party
let o = "one"

let l = log
let a = "awesome"

let f = farther
let fa = "Farther "

let fafa = farther("Farhter")

let lo = l(a, fafa)

let po = p(o, lo)

f(fa, (handlers, value) => p(o, l(a, value)))

becomes
farther("Farther", handlers, (handlers, value) => {
    log(value);
    // do the rest
})

*/

const farther = (name: string): string => {
    log("yes please " ++ name);
    raise!(Stdio.read())
}

const inner = (name: string): void => {
    log(farther("Folks") ++ " from farther");
    log("getting");
    log(name);
    log(raise!(Stdio.read()) ++ " and " ++ raise!(Stdio.read()));
    log("And then " ++ raise!(Stdio.read()));
    log("Dones")
}

// const callOne = (f) => f(2, "hi")
// const test2 = () => callOne((a, b) => log(b))

const test1 = () => {
    respondWith("<read>")<void>(() => inner("Yes"))
}

collect{}(test1) == "yes please Folks\n<read> from farther\ngetting\nYes\n<read>. and <read>..\nAnd then <read>...\nDones\nend"

const maybeRaise = (shouldRaise: bool) => {
    if shouldRaise {
        raise!(Stdio.read())
    } else {
        "didn't raise"
    }
}

const test2 = () => {
    respondWith("<read>")<void>(() => log(maybeRaise(true) ++ maybeRaise(false)))
}

collect{}(test2) == "<read>didn't raise\nend"

const raiseIf = (check: string) => {
    if raise!(Stdio.read()) == check {
        raise!(Stdio.read())
    } else {
        "didn't raise"
    }
}

const test3 = () => {
    log(respondWith("<read>")<string>(() ={Stdio, Log}> raiseIf("<read>")))
}

collect{}(test3) == "<read>.\nend"

const letBind = () => {
    const x = raise!(Stdio.read());
    log(x ++ "Hello")
}

const test4 = () => {
    respondWith("<read>")<void>(letBind)
}

collect{}(test4) == "<read>Hello\nend"

effect MultiArg {
    putTwo: (int, string) => string,
}

const handleMulti: (() ={MultiArg}> string) => string = (f: () ={MultiArg}> string): string => {
    handle! f {
        MultiArg.putTwo((num, text) => k) => handleMulti(() => k(intToString(num) ++ ":" ++ text)),
        pure(v) => v ++ ":ok"
    }
}

const full = () ={}> {
    handleMulti(() => raise!(MultiArg.putTwo(4, "five")))
}

full() == "4:five:ok"
