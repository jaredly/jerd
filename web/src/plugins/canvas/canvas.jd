
@ffi
type Vec2 = {
    x: float,
    y: float
}

@ffi
type Arc = {
	center: Vec2,
	startAngle: float,
	endAngle: float,
	counterClockwise: bool = false,
};

@ffi
enum Color {
	CSS{value: string},
	Rgba{r: float, g: float, b: float, a: float = 1.0},
};

@ffi
enum PathPart {
	Vec2,
	Quadratic{control: Vec2, end: Vec2},
	Bezier{c1: Vec2, c2: Vec2, c3: Vec2, c4: Vec2, end: Vec2},
	Rounded{c1: Vec2, c2: Vec2, radius: float},
	Arc,
	EllipsePath{...Arc, radius: Vec2, rotation: float},
};

@ffi
type Path = {
	start: Vec2,
	closed: bool = false,
	parts: Array<PathPart>
}

@ffi
type Ellipse = {
	pos: Vec2,
	radius: Vec2,
	rotation: float = 0.0,
};

const circle = (pos: Vec2, r: float) => Ellipse{pos: pos, radius: Vec2{x: r, y: r}};

@ffi
type Line = {
	p1: Vec2,
	p2: Vec2,
};

@ffi
type Polygon = {
	points: Array<Vec2>,
	closed: bool = true,
};

@ffi
type Rect = {
	pos: Vec2,
	size: Vec2,
	rotation: float = 0.0,
};

@ffi
enum Geom {
	Ellipse,
	Line,
	Polygon,
	Rect,
	Path,
}

@ffi
type Fill = {
	geom: Geom,
	color: Color,
};

@ffi
enum LineCap {
	Butt{},
	Round{},
	Square{}
};

@ffi
type Stroke = {
	geom: Geom,
	color: Color,
	width: float = 1.0,
	lineCaps: LineCap = LineCap:Round
};

@ffi
enum TextAlign {
	Left{},
	Right{},
	Center{},
	Start{},
	End{},
}

@ffi
type Text = {
	text: string,
	color: Color,
	pos: Vec2,
	// 0 for fill, anything else for stroke
	stroke: float = 0.0,
	font: string = "",
	textAlign: TextAlign = TextAlign:Start,
}

enum Drawable {
	Fill,
	Stroke,
	Text,
}

@ffi
type CanvasScene<State> = {
	initial: State,
	update: (state: State, dt: float) => State,
	draw: (state: State) => Array<Drawable>,
	clear: bool = true,
	fps: float = 60.0,
	size: Vec2 = Vec2{x: 200.0, y: 200.0},
}
